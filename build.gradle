buildscript {
    repositories {
        mavenLocal()
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://dist.creeper.host/Sponge/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'idea'
    id 'maven-publish'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

/**
 * Version in dev is set to 'dev'
 * Any builds produced by the github actions build script will have a version matching their tag.
 * Version numbers are [Major - MC Version].[Minor - Feature Version].[Patch]-[Full MC Version]
 */
def envVersion = System.getenv("VERSION")
def useOfficial = (System.getenv("JITPACK") != null || System.getenv("OFFICIAL_MAPPINGS") != null);
version = envVersion == null ? "dev" : envVersion
group = 'com.github.alcatrazEscapee' // group name set for jitpack
archivesBaseName = 'chocolate'
println 'Chocolate build.gradle with version \'' + version + '\' and use official = \'' + useOfficial + '\''

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

repositories {
    mavenLocal()
}

minecraft {
    // Mappings used are generated by Mappificator (https://github.com/alcatrazEscapee/mappificator)
    // See the project README page for how to generate the mapping set.
    // Otherwise, we use official mappings in a build script version
    if (useOfficial) {
        mappings channel: 'official', version: mc_version
    } else {
        mappings channel: 'snapshot', version: 'complete-20200912-1.16.3-v5'
    }
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Run configurations
    runs {
        client {
            workingDirectory project.file('run')
            arg '-mixin.config=' + mod_id + '.mixins.json'
            property 'forge.logging.console.level', 'debug'
            mods {
                chocolate {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            arg '-mixin.config=' + mod_id + '.mixins.json'
            arg '--nogui'
            property 'forge.logging.console.level', 'debug'
            mods {
                chocolate {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
}

// Puts the mod version into the jar for mods.toml to read from
jar {
    manifest {
        attributes ([
                "Implementation-Version": "${version}",
                "MixinConfigs": "${mod_id}.mixins.json",
                "FMLModType": "LIBRARY"
        ])
    }
}

jar.finalizedBy('reobfJar')

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
}

curseforge {
    def envApiKey = System.getenv('CURSEFORGE_API_KEY')
    if (envApiKey == null) {
        println 'No Curseforge API Key'
        envApiKey = 'kaput'
        return
    }
    project {
        apiKey = envApiKey
        id = '416306'
        changelog = "[Release Notes ${version}](https://github.com/alcatrazEscapee/Chocolate/releases/tag/${version})"
        changelogType = 'markdown'
        releaseType = 'release'
        addGameVersion "${mc_version}"
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            groupId = 'com.github.alcatrazEscapee'
            artifactId = "${mod_id}"
            version = "${version}"

            // Adds the sources as an artifact.
            artifact sourcesJar {
                classifier 'sources'
            }
        }
    }
    repositories {
        mavenLocal()
    }
}